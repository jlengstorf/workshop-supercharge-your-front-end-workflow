{"version":3,"sources":["class.supercharged.js","class.superchargedfacebook.js","class.superchargedinstagram.js","config.js","main.js"],"names":["Supercharged","options","opts","this","debug","container","photosToDisplay","template","name","constructor","log","bows","localStorage","prototype","Object","create","value","loadURL","url","successCB","errorCB","loadJSON","request","XMLHttpRequest","success","error","open","onload","status","response","JSON","parse","responseText","onerror","send","loadJSONP","random","Uint32Array","window","crypto","getRandomValues","cbName","data","jsonp","document","createElement","src","head","appendChild","renderTemplate","templateVars","callback","cb","markup","Mustache","render","handleError","addToDOM","querySelector","innerHTML","call","SuperchargedFacebook","apply","arguments","token","albumID","api","loadRecentMedia","self","endpoint","handleJSON","bind","count","hasOwnProperty","length","photos","forEach","media","index","imgSrc","picture","link","caption","SuperchargedInstagram","userID","igAPI","type","images","low_resolution","text","APP_CONFIG","instagram","facebook","config","ig_config","fb_config"],"mappings":"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","file":"all.min.js","sourcesContent":["// # class.supercharged.js\n\n// This class contains methods and properties relating to the app. They're set \n// up in a way that allows us to quickly and easily call methods without the \n// need to remember lots of parameters.\n\n(function () {\n  'use strict';\n\n  // ## Add a constructor\n\n  function Supercharged( options ) {\n\n    // - Check for user-supplied options and use an empty object if none exists\n    var opts = options || {};\n\n    // - Set debug mode based on config (defaults to `false`)\n    this.debug = opts.debug || false;\n\n    // - Get the container from the options (default `false` to fail gracefully)\n    this.container = opts.container || false;\n\n    // - Set the number of photos to be displayed\n    this.photosToDisplay = opts.photosToDisplay || 10;\n\n    // - Set the location of the template for displaying output\n    this.template = opts.template || false;\n\n    // - Get the class name (for debugging)\n    var name = this.constructor.name || 'Supercharged';\n\n    // - Chooses a logger\n    this.log = typeof bows==='function' ? bows(name) : function(){};\n\n    // - Sets logging according to config options\n    localStorage.debug = (this.debug) ? true : '';\n\n    // - Create an initial log message to announce that the class was created\n    this.log('New instance created.');\n\n  }\n\n  // Using `Object.create` allows us to easily extend this object later.\n  Supercharged.prototype = Object.create({\n    constructor: {\n      value: Supercharged\n    }\n  });\n\n  // ## Load a URL via AJAX\n\n  // Send a request to load a document as either plain text or JSON\n  Supercharged.prototype.loadURL = function( url, successCB, errorCB, loadJSON ) {\n\n    // - Set up an `XMLHttpRequest` object (Look Ma! No jQuery!)\n    var self=this,\n        request = new XMLHttpRequest(),\n        success = typeof successCB==='function' ? successCB : function(){},\n        error = typeof errorCB==='function' ? errorCB : function(){};\n    \n    // - Make sure the `loadJSON` argument is boolean\n    loadJSON = loadJSON===false ? false : true;\n\n    // - Open the request to load the URL\n    request.open('GET', url, true);\n\n    // - Set a handler for when the request is loaded\n    request.onload = function(  ) {\n\n      // - Check for a valid response code\n      if (request.status>=200 && request.status<400) {\n\n        // - Check if the response is expected to be JSON\n        var response = '';\n        if (!!loadJSON) {\n          response = JSON.parse(request.responseText);\n        } else {\n          response = request.responseText;\n        }\n\n        // - Fire the success callback\n        success(response);\n\n      } else {\n\n        // - If the request status is wrong, fire the error callback\n        error(request);\n\n      }\n\n    };\n\n    // - If the request throws an error, fire the error callback\n    request.onerror = function(  ) {\n      error(request);\n    };\n\n    // - Actually send the request\n    request.send();\n\n  };\n\n  // ## Load data via JSONP\n\n  // For sites without CORS headers, we use JSONP as a workaround\n  Supercharged.prototype.loadJSONP = function( url, successCB ) {\n\n    // ### Create a unique callback function to handle the response\n    // - Create an empty array with one element\n    var random = new Uint32Array(1);\n\n    // - Generate a random value and fill the new array\n    window.crypto.getRandomValues(random);\n\n    // - Generate a unique name for the callback using the random value\n    var cbName = 'cb' + random[0];\n\n    // - Create a function to act as the the JSONP callback\n    window[cbName] = function( data ) {\n      if (typeof successCB==='function') {\n        successCB(data);\n      }\n    };\n\n    // ### Embed the script\n    // - Create a script\n    var jsonp = document.createElement('script');\n\n    // - Set the src to the target URL with a reference to our callback\n    jsonp.src = url + '&callback=' + cbName;\n\n    // - Inject the new script into the DOM to load it\n    document.head.appendChild(jsonp);\n\n  };\n\n  // ## Process a template\n\n  // Load a Mustache template and process it with template variables\n  Supercharged.prototype.renderTemplate = function( template, templateVars, callback ) {\n    var self = this,\n        cb = typeof callback==='function' ? callback : function(){},\n        success = function(template) {\n\n          // - After successfully loading the template, render it with Mustache\n          var markup = Mustache.render(template, templateVars);\n\n          // - Fire the given callback function to do something with the markup\n          cb(markup);\n\n        };\n\n    // - Make sure the template is set\n    if (!!template) {\n\n      // ### Load the template and specify success and failure callbacks\n      // - Templates should not be loaded as JSON, so set `loadJSON` to `false` \n      this.loadURL(template, success, this.handleError, false);\n\n    } else {\n\n      // - Log a message if no template is specified\n      this.log('No template specified.');\n\n    }\n\n  };\n\n  // ## Add markup to the DOM\n\n  // Add the rendered template markup to the DOM inside a specified element\n  Supercharged.prototype.addToDOM = function( markup ) {\n\n    // - Select the container \n    var container = document.querySelector(this.container);\n\n    // - Ensure the container exists\n    if (container) {\n\n      // - Replace its contents with the new markup\n      container.innerHTML = markup;\n\n    } else {\n\n      // - Log a message if the container is invalid\n      this.log('Please specify a valid container.');\n\n    }\n\n  };\n\n  // ## Handle application errors\n  Supercharged.prototype.handleError = function( error ) {\n\n    // - For lack of better error handling, simply log errors for now\n    this.log(error);\n\n  };\n\n  // Make the Supercharged class available in the global scope\n  window.Supercharged = Supercharged;\n\n}).call();\n","// # class.superchargedfacebook.js\n\n// This class loads a given photo album from Facebook and renders photos with \n// Mustache templates.\n\n(function () {\n  'use strict';\n\n  // ## Create a constructor\n\n  // The constructor for the `SuperchargedFacebook` class sets up config data.\n  function SuperchargedFacebook( options ) {\n\n    // - Call the parent class constructor\n    Supercharged.apply(this, arguments);\n\n    // - Avoid errors with setting options by ensuring there's an object\n    var opts = options || {};\n\n    // - Load the token and album ID from the `options` hash\n    this.token = opts.token || false;\n    this.albumID = opts.albumID || false;\n\n    // - If the token and/or album ID is missing, don't bother continuing\n    if (!this.token || !this.albumID) {\n      this.log('A valid token and album ID are required.');\n      return false;\n    }\n\n    // - Set the URL for the API\n    this.api = 'https://graph.facebook.com/v2.3/';\n\n  }\n\n  // Create an object that extends the `Supercharged` class.\n  SuperchargedFacebook.prototype = Object.create(Supercharged.prototype, {\n    constructor: {\n      value: SuperchargedFacebook\n    }\n  });\n\n  // ## Load user media\n\n  // Create a request for the specified album's photos\n  SuperchargedFacebook.prototype.loadRecentMedia = function(  ) {\n\n    var self = this,\n\n        // - Determine the proper API endpoint\n        endpoint = self.api + self.albumID + '/photos',\n\n        // - Attach the access token to avoid errors\n        url = endpoint + '?access_token=' + self.token;\n\n    // - Use JSONP to load the data and process it with the `handleJSON` method\n    self.loadJSONP(url, self.handleJSON.bind(self));\n\n  };\n\n  // ## Handle the JSON response\n\n  // Parse the returned JSON in a format usable by our template.\n  SuperchargedFacebook.prototype.handleJSON = function( response ) {\n\n    // - Make the `this` accessible inside the `forEach` loop\n    var self = this,\n        templateVars = {},\n        count = 0;\n\n    self.log('Data received:', response);\n\n    // - Make sure the response contains valid data\n    if (response.hasOwnProperty('data') && response.data.length>0) {\n\n      // - Create an empty object to store photos\n      templateVars.photos = [];\n\n      // - Loop through each item in the returned media\n      response.data.forEach(function( media, index ) {\n\n        if (count>=self.photosToDisplay) {\n          return;\n        }\n\n        // - Add info about the image to the photos object\n        templateVars.photos[count++] = {\n          imgSrc: media.picture,\n          link: media.link,\n          caption: 'Image from Facebook'\n        };\n\n      });\n\n      // - Render the output using a Mustache template\n      self.renderTemplate(self.template, templateVars, self.addToDOM.bind(self));\n\n    }\n\n  };\n\n  // Make the SuperchargedFacebook class available to the global scope\n  window.SuperchargedFacebook = SuperchargedFacebook;\n\n}).call();\n","// # class.superchargedinstagram.js\n\n// This class loads a given user's recent Instagram posts and displays them on \n// the page using Mustache templates.\n\n(function () {\n  'use strict';\n\n  // ## Create a constructor\n\n  // The constructor for the `SuperchargedInstagram` class sets up config data.\n  function SuperchargedInstagram( options ) {\n\n    // - Call the parent class constructor\n    Supercharged.apply(this, arguments);\n\n    // - Avoid errors with setting options by ensuring there's an object\n    var opts = options || {};\n\n    // - Load the token and user ID from the `options` hash\n    this.token = opts.token || false;\n    this.userID = opts.userID || false;\n\n    // - If the token and/or user ID is missing, don't bother continuing\n    if (!this.token || !this.userID) {\n      this.log('A valid token and user ID are required.');\n      return false;\n    }\n\n    // - Set the URL for the API\n    this.igAPI = 'https://api.instagram.com/v1/';\n\n  }\n\n  // Create an object that extends the `Supercharged` class.\n  SuperchargedInstagram.prototype = Object.create(Supercharged.prototype, {\n    constructor: {\n      value: SuperchargedInstagram\n    }\n  });\n\n  // ## Load user media\n\n  // Create a request for the specified user's photos\n  SuperchargedInstagram.prototype.loadRecentMedia = function(  ) {\n\n    var self = this,\n\n        // - Determine the proper API endpoint\n        endpoint = self.igAPI + 'users/' + self.userID + '/media/recent',\n\n        // - Attach the access token to avoid errors\n        url = endpoint + '?access_token=' + self.token;\n\n    // - Use JSONP to load the data and process it with the `handleJSON` method\n    self.loadJSONP(url, self.handleJSON.bind(self));\n\n  };\n\n  // ## Handle the JSON response\n\n  // Parse the returned JSON in a format usable by our template.\n  SuperchargedInstagram.prototype.handleJSON = function( response ) {\n\n    // - Make the `this` accessible inside the `forEach` loop\n    var self = this,\n        templateVars = {},\n        count = 0;\n\n    self.log('Data received:', response);\n\n    // - Make sure the response contains valid data\n    if (response.hasOwnProperty('data') && response.data.length>0) {\n\n      // - Create an empty object to store photos\n      templateVars.photos = [];\n\n      // - Loop through each item in the returned media\n      response.data.forEach(function( media, index ) {\n\n        if (count>=self.photosToDisplay) {\n          return;\n        }\n\n        // - For now, only images are supported\n        if (media.type==='image') {\n\n          // - Add info about the image to the photos object\n          templateVars.photos[count++] = {\n            imgSrc: media.images.low_resolution.url,\n            link: media.link,\n            caption: media.caption.text\n          };\n\n        }\n\n      });\n\n      // - Render the output using a Mustache template\n      self.log(templateVars);\n      self.renderTemplate(self.template, templateVars, self.addToDOM.bind(self));\n\n    }\n\n  };\n\n  // Make the SuperchargedInstagram class available to the global scope\n  window.SuperchargedInstagram = SuperchargedInstagram;\n\n}).call();\n","// # config.js\n\n// This file sets up config data for use within the app.\n\n(function(  ) {\n  'use strict';\n\n  window.APP_CONFIG = {\n    instagram: {\n\n      // - [Find your user ID](http://jelled.com/instagram/lookup-user-id)\n      userID: '30794906',\n\n      // - [Get a token](https://instagram.com/developer/api-console/)\n      token: '30794906.1fb234f.8faa8c1dd437479a9ca8f9dda5b202b8'\n\n    },\n    facebook: {\n\n      // - [Find an album ID](http://bit.ly/1yTm0RI)\n      albumID: '756766124393291',\n\n      // - [Get a token](http://bit.ly/1DgCkqZ)\n      token: '220587498083499|VrVXAg_mqhH6cOA8OGFGR9rGyV4'\n\n    }\n  };\n\n})();\n","// # main.js\n\n// This script initializes all functionality for the app.\n\n(function(  ) {\n  'use strict';\n\n  // Load config variables.\n  var config = window.APP_CONFIG;\n\n  // ## Set up the Instagram photo loader\n\n  // - Create config options for the Supercharged class\n  var ig_config = {\n    debug: true,\n    userID: config.instagram.userID,\n    token: config.instagram.token,\n    container: '.photo-viewer--instagram',\n    template: '/partials/instagram.mustache'\n  };\n\n  // - Create a new instance of the SuperchargedInstagram class\n  var instagram = new SuperchargedInstagram(ig_config);\n\n  // - Load recent photos from Instagram\n  instagram.loadRecentMedia();\n\n\n  // ## Set up the Facebook album loader\n\n  // - Create config options for the SuperchargedFacebook class\n  var fb_config = {\n    debug: true,\n    albumID: config.facebook.albumID,\n    token: config.facebook.token,\n    container: '.photo-viewer--facebook',\n    template: '/partials/facebook.mustache',\n    // - Limit the number of photos to display\n    photosToDisplay: 8\n\n  };\n\n  // - Create a new instance of the SuperchargedFacebook class\n  var facebook = new SuperchargedFacebook(fb_config);\n\n  // - Load photos from the Facebook album\n  facebook.loadRecentMedia();\n\n}).call();\n"],"sourceRoot":"/source/"}